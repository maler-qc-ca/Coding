php artisan migrate:fresh
php artisan tinker
>>> factory(App\User::class)->create();
>>> factory(App\User::class, 5)->create();
php artisan make:factory ArticleFactory -m "App\Article"

>>> factory(App\Article::class, 5)->create();
>>> factory(App\Article::class, 5)->create(['user_id' => 16]);

>>> factory(App\User::class, 2)->create();
>>> factory(App\Article::class, 5)->create(['user_id' => 1]);
>>> factory(App\Article::class, 10)->create(['user_id' => 2]);
>>> $user = App\User::find(1);
>>> $user->articles;


>>> $article = App\Article::find(1);

>>> $article->user;

>>> App\Article::find(1)->author;
>>> App\Article::find(1)->tags->pluck('name');

>>> $article = App\Article::find(5);
>>> $article->tags()->attach(1);
>>> $article->tags()->attach([2,3]);
>>> $article->tags()->detach([2,3]);

>>> $tag = App\Tag::find(1);
>>> $article->tags()->attach($tag);

>>> $tags = App\Tag::findMany([1,2]);
>>> $article->tags()->attach($tags);


composer require laravel/ui --dev
php artisan ui vue --auth
npm install && npm run dev

php artisan route:list

>>> App\Article::first();
>>> App\Article::first()->title;
>>> App\Article::all();
>>> $tags = App\Article::first()->tags;
>>> $tags->first();
>>> $tags->last();
	>>> $tags->where('name', 'Laravel'); !== App\Tag::where('name', 'Laravel')->first(); (DB Eleq)
>>> $tags->first(function ($tag) { return strlen($tag->name) > 5; });
>>> collect(['a', 'b', 'c', ['x', 'y']])->flatten();

>>> $items = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
>>> $items->filter( function ($item) { return $item >= 5; } );
>>> $greaterThan4 = $items->filter( function ($item) { return $item >= 5; } );
>>> $items->filter( function ($item) { return $item % 2 === 0; } );
>>> $items->filter( function ($item) { return $item % 2 === 0; } )->map( function($item) { return $item * 2; }  );
>>> $items->filter( function ($item) { return $item % 2 === 0; } )->map( function($item) { return $item * 2; }  )->last();

>>> $articles = App\Article::with('tags')->get();
>>> $articles->pluck('title');

>>> $articles->pluck('tags');
>>> $articles->pluck('tags')->collapse();
>>> $articles->pluck('tags')->collapse()->pluck('name');
>>> $articles->pluck('tags')->collapse()->pluck('name')->unique(); === $articles->pluck('tags.*.name')->collapse()->unique();
>>> $relevantTags = $articles->pluck('tags.*.name')->collapse()->unique();
>>> $relevantTags = $articles->pluck('tags.*.name')->collapse()->unique()->map(function ($item){ return ucwords($item); });



>>> app()->bind('key', function () { return 'Moe'; } );
>>> resolve('key'); // = app('key')

>>> File::get(public_path('index.php'));
>>> app('files')->get(public_path('index.php'))

>>> App\ExampleFacade::handle(); // = app('example')->handle();

php artisan make:mail ContactHelpDesk